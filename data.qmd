---
title: "Data Portal"
subtitle: "Download the Data Used in the Report's Figures"
date-modified: "2024-03-27T15:44:00-08:00"
date-format: "MMM D, YYYY [at] HH:mm z"
output:
  quarto::quarto_html:
    pre_processor: quarto::observable
echo: false
---


## Data Overview
The data used in this web-book is derived from federal, state, commercial, and local sources, as well as direct communications with utilities and state program managers. More information about [data sources](https://acep-uaf.github.io/ak-energy-statistics-2011_2021/) can be found on the [methods page](./methods.html) of this web-book.

## Download Individual Tables
Individual tables can be downloaded here as text files (CSV, comma-separated values). Once downloaded to your local machine, these files can be opened graphically using Microsoft Excel, or programmatically using R or Python. 


### Capacity
`{ojs} capacity_wide_description`

```{ojs}
capacity_wide_description = metadata.resources[0].description;
capacity_wide_raw = FileAttachment("data/working/capacity/capacity_wide.csv").csv({typed: true});

capacity_wide = tidy(capacity_wide_raw,
                  filter((d) => d.year < 2020))

capacity_wide_path = metadata.resources[0].path;
capacity_wide_metadata = metadata.resources[0].schema.fields;


viewof capacity_input = Inputs.select(new Map([
                ["Capacity Metadata", capacity_wide_metadata], 
                ["Capacity", capacity_wide]]), 
              {value: capacity_wide_metadata, label: "Preview:"}
              );

Inputs.table(capacity_input);

```

:::: {.columns}
::: {.column width="20%"}
#### Download
#### Download
:::
::: {.column width="80%"}
```{ojs}
button(capacity_wide_metadata, 'capacity_metadata.csv', `Capacity Metadata`)
button(capacity_wide, `capacity.csv`, `Capacity`)
```
:::
:::

<br>
<br>

### Net Generation
`{ojs} net_generation_wide_description `

```{ojs}
net_generation_wide_description = metadata.resources[2].description
net_generation_wide_raw = FileAttachment("data/working/generation/net_generation_wide.csv").csv({typed: true});

net_generation_wide = tidy(net_generation_wide_raw,
                  filter((d) => d.year < 2020))

net_generation_wide_path = metadata.resources[2].path
net_generation_wide_metadata = metadata.resources[2].schema.fields

viewof generation_input = Inputs.select(new Map([["Generation Metadata", net_generation_wide_metadata], 
              ["Generation", net_generation_wide]]), 
              {value: net_generation_wide_metadata, label: "Preview:"}
              );
Inputs.table(generation_input);

```

:::: {.columns}
::: {.column width="20%"}
#### Download
#### Download
:::
::: {.column width="80%"}
```{ojs}
button(net_generation_wide_metadata, 'net_generation_wide_metadata.csv', `Generation Metadata`)
button(net_generation_wide, `net_generation_wide.csv`, `Net Generation`)
```
:::
:::

<br>
<br>

### Consumption and Sales
`{ojs} consumption_wide_description`

```{ojs}
consumption_wide_description = metadata.resources[4].description
consumption_wide_raw = FileAttachment("data/working/consumption/consumption_wide.csv").csv({typed: true});

consumption_wide = tidy(consumption_wide_raw,
                  filter((d) => d.year < 2020))

consumption_wide_path = metadata.resources[4].path
consumption_wide_metadata = metadata.resources[4].schema.fields

viewof consumption_input = Inputs.select(new Map([["Consumption Metadata", consumption_wide_metadata], 
              ["Consumption", consumption_wide]]), 
              {value: consumption_wide_metadata, label: "Preview:"}
              );
Inputs.table(consumption_input);

```

:::: {.columns}
::: {.column width="20%"}
#### Download
#### Download
:::
::: {.column width="80%"}
```{ojs}
button(consumption_wide_metadata, 'consumption_wide_metadata.csv', `Consumption Metadata`)
button(consumption_wide, `consumption_wide.csv`, `Consumption`)

```
:::
:::

<br>
<br>


### Prices
`{ojs} prices_description `

```{ojs}
prices_description = metadata.resources[6].description;
prices_raw = FileAttachment("data/working/prices/prices.csv").csv({typed: true});

prices = tidy(prices_raw,
            filter((d) => d.year < 2020))

prices_path = metadata.resources[6].path;
prices_metadata = metadata.resources[6].schema.fields;


viewof prices_input = Inputs.select(new Map([["Prices Metadata", prices_metadata], 
              ["Prices", prices]]), 
              {value: prices_metadata, label: "Preview:"}
              );

Inputs.table(prices_input);

```

:::: {.columns}
::: {.column width="20%"}
#### Download
#### Download
:::
::: {.column width="80%"}
```{ojs}
button(prices_metadata, `prices_metadata.csv`, `Metadata`);
button(prices, `prices.csv`, `Prices`);
``` 
:::
:::

<br>
<br>

### Population-Weighted Average Prices
`{ojs} weighted_prices_description `

```{ojs}
weighted_prices_description = metadata.resources[7].description;
weighted_prices_raw = FileAttachment("data/working/prices/weighted_prices.csv").csv({typed: true});

weighted_prices = tidy(weighted_prices_raw,
                    filter((d) => d.year < 2020))

weighted_prices_path = metadata.resources[7].path;
weighted_prices_metadata = metadata.resources[7].schema.fields;

viewof weighted_prices_input = Inputs.select(new Map([["Weighted Prices Metadata", weighted_prices_metadata], 
              ["Weighted Prices", weighted_prices]]), 
              {value: weighted_prices_metadata, label: "Preview:"}
              );

Inputs.table(weighted_prices_input);

```

:::: {.columns}
::: {.column width="20%"}
#### Download
#### Download
:::
::: {.column width="80%"}
```{ojs}
button(weighted_prices_metadata, `weighted_prices_metadata.csv`, `Metadata`);
button(weighted_prices, `weighted_prices.csv`, `Weighted Prices`)
```
:::
:::




```{ojs}
// load libraries
stdlib = require("@observablehq/stdlib")
d3 = require("d3@7")
import {tidy, groupBy, rename, summarize, sum, mutate, select, n, nDistinct, mean, filter, pivotWider, pivotLonger, leftJoin, slice} from "@pbeshai/tidyjs"

// load metadata
metadata = FileAttachment("data/metadata.json").json();

```

```{ojs}
// download button function
button = (data, filename = 'data.csv', displayname) => {
  const downloadData = new Blob([d3.csvFormat(data)], { type: "text/csv" });

  const size = (downloadData.size / 1024).toFixed(1);
  const button = DOM.download(
    downloadData,
    filename,
    `${displayname} (${size} KB)`
  );
  return button;
}

```


<br>
<br>
<br>

```{ojs}
//| eval: false
// DEPRECATED
// THIS CHUNK DOES NOT RUN (eval: false)

// fancy dropdown database viewing tool

// connect to database
db = FileAttachment("data/working/aetr.db").sqlite()

viewof dbTable = Inputs.select((await db.describe()).value.map(d => d.name), 
                    { label: "" })

database = db.query(`SELECT * FROM ${dbTable}`)


Inputs.table(database)

db_button = (database, filename = 'data.csv') => {
  const downloadData = new Blob([d3.csvFormat(database)], { type: "text/csv" });

  const size = (downloadData.size / 1024).toFixed(1);
  const button = DOM.download(
    downloadData,
    filename,
    `Download ${filename} (${size} KB)`
  );
  return button;
}

db_button(database, `${dbTable}`)
```
